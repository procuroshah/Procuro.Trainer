// <auto-generated />
using System;
using LearningManagementSystem.ApiService.Infrastructure.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LearningManagementSystem.ApiService.Infrastructure.EfCore.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<bool>("AdditionalInfoEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("additional_info_enabled");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("DescriptionEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("description_enabled");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("milestone_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_activities");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_activities_section_id");

                    b.ToTable("activities", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.ActivityMilestoneRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("RequirementType")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_type");

                    b.HasKey("Id")
                        .HasName("pk_milestone_requirement_types");

                    b.HasIndex("ActivityId")
                        .IsUnique()
                        .HasDatabaseName("ix_milestone_requirement_types_activity_id");

                    b.ToTable("milestone_requirement_types", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.ActivityQuizOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<bool>("AllowRetakes")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_retakes");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("HideCorrectAnswers")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_correct_answers");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<int>("RetakeAmount")
                        .HasColumnType("integer")
                        .HasColumnName("retake_amount");

                    b.Property<bool>("RetakeUnlimited")
                        .HasColumnType("boolean")
                        .HasColumnName("retake_unlimited");

                    b.Property<int>("TimeLimitMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("time_limit_minutes");

                    b.HasKey("Id")
                        .HasName("pk_activity_quiz_options");

                    b.HasIndex("ActivityId")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_quiz_options_activity_id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_activity_quiz_options_quiz_id");

                    b.ToTable("activity_quiz_options", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.ActivityVideoOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<bool>("AllowFullscreen")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_fullscreen");

                    b.Property<bool>("AutoPlay")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_play");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<bool>("MaximizeContent")
                        .HasColumnType("boolean")
                        .HasColumnName("maximize_content");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_activity_video_options");

                    b.HasIndex("ActivityId")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_video_options_activity_id");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_activity_video_options_media_id");

                    b.ToTable("activity_video_options", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("FullDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("full_description");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.ToTable("courses", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.LearningPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_learning_paths");

                    b.ToTable("learning_paths", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.LearningPathCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("LearningPathId")
                        .HasColumnType("uuid")
                        .HasColumnName("learning_path_id");

                    b.Property<int>("Seq")
                        .HasColumnType("integer")
                        .HasColumnName("seq");

                    b.HasKey("Id")
                        .HasName("pk_learning_path_courses");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_learning_path_courses_course_id");

                    b.HasIndex("LearningPathId")
                        .HasDatabaseName("ix_learning_path_courses_learning_path_id");

                    b.ToTable("learning_path_courses", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("file_name");

                    b.Property<int>("FileType")
                        .HasColumnType("integer")
                        .HasColumnName("file_type");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaded_by_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_medias");

                    b.HasIndex("UploadedById")
                        .HasDatabaseName("ix_medias_uploaded_by_id");

                    b.ToTable("medias", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_quizzes_activity_id");

                    b.ToTable("quizzes", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.QuizOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("option_text");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_question_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_options");

                    b.HasIndex("QuizQuestionId")
                        .HasDatabaseName("ix_quiz_options_quiz_question_id");

                    b.ToTable("quiz_options", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("question_text");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_questions");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_quiz_questions_quiz_id");

                    b.ToTable("quiz_questions", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Seq")
                        .HasColumnType("integer")
                        .HasColumnName("seq");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_sections_course_id");

                    b.ToTable("sections", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.ToTable("group", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.GroupLearningPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("LearningPathId")
                        .HasColumnType("uuid")
                        .HasColumnName("learning_path_id");

                    b.HasKey("Id")
                        .HasName("pk_group_learning_path");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_learning_path_group_id");

                    b.HasIndex("LearningPathId")
                        .HasDatabaseName("ix_group_learning_path_learning_path_id");

                    b.ToTable("group_learning_path", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ExternalUserId")
                        .HasColumnType("text")
                        .HasColumnName("external_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("LearningPathId")
                        .HasColumnType("uuid")
                        .HasColumnName("learning_path_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_activity");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_user_activity_activity_id");

                    b.HasIndex("LearningPathId")
                        .HasDatabaseName("ix_user_activity_learning_path_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_activity_user_id");

                    b.ToTable("user_activity", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_group");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_group_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_group_user_id");

                    b.ToTable("user_group", "catalog");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Activity", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Section", "Section")
                        .WithMany("Activities")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activities_sections_section_id");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.ActivityMilestoneRequirements", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Activity", null)
                        .WithOne("MilestoneRequirements")
                        .HasForeignKey("LearningManagementSystem.ApiService.Features.Content.Data.ActivityMilestoneRequirements", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_milestone_requirement_types_activities_activity_id");

                    b.OwnsMany("LearningManagementSystem.ApiService.Features.Content.Data.ActivityMilestoneRequirements+MilestoneProp", "MilestoneProps", b1 =>
                        {
                            b1.Property<int>("ActivityMilestoneRequirementsId")
                                .HasColumnType("integer")
                                .HasColumnName("activity_milestone_requirements_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid?>("MediaId")
                                .HasColumnType("uuid")
                                .HasColumnName("media_id");

                            b1.Property<int>("MinimumPct")
                                .HasColumnType("integer")
                                .HasColumnName("minimum_pct");

                            b1.HasKey("ActivityMilestoneRequirementsId", "Id")
                                .HasName("pk_milestone_prop");

                            b1.HasIndex("MediaId")
                                .HasDatabaseName("ix_milestone_prop_media_id");

                            b1.ToTable("milestone_prop", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ActivityMilestoneRequirementsId")
                                .HasConstraintName("fk_milestone_prop_milestone_requirement_types_activity_milesto");

                            b1.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Media", "Media")
                                .WithMany()
                                .HasForeignKey("MediaId")
                                .HasConstraintName("fk_milestone_prop_medias_media_id");

                            b1.Navigation("Media");
                        });

                    b.Navigation("MilestoneProps");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.ActivityQuizOptions", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Activity", "Activity")
                        .WithOne("QuizOptions")
                        .HasForeignKey("LearningManagementSystem.ApiService.Features.Content.Data.ActivityQuizOptions", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_quiz_options_activities_activity_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .HasConstraintName("fk_activity_quiz_options_quizzes_quiz_id");

                    b.Navigation("Activity");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.ActivityVideoOptions", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Activity", null)
                        .WithOne("VideoOptions")
                        .HasForeignKey("LearningManagementSystem.ApiService.Features.Content.Data.ActivityVideoOptions", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_video_options_activities_activity_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .HasConstraintName("fk_activity_video_options_medias_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.LearningPathCourse", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Course", "Course")
                        .WithMany("LearningPathCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learning_path_courses_courses_course_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.LearningPath", "LearningPath")
                        .WithMany("LearningPathCourses")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learning_path_courses_learning_paths_learning_path_id");

                    b.Navigation("Course");

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Media", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Users.Data.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medias_user_uploaded_by_id");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Quiz", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quizzes_activities_activity_id");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.QuizOption", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.QuizQuestion", "QuizQuestion")
                        .WithMany("Options")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_options_quiz_questions_quiz_question_id");

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.QuizQuestion", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_questions_quizzes_quiz_id");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Section", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sections_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.GroupLearningPath", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Users.Data.Group", "Group")
                        .WithMany("GroupLearningPaths")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_learning_path_group_group_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.LearningPath", "LearningPath")
                        .WithMany()
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_learning_path_learning_paths_learning_path_id");

                    b.Navigation("Group");

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.UserActivity", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_activity_activities_activity_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Content.Data.LearningPath", "LearningPath")
                        .WithMany()
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_activity_learning_paths_learning_path_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Users.Data.User", null)
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_activity_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.UserGroup", b =>
                {
                    b.HasOne("LearningManagementSystem.ApiService.Features.Users.Data.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_group_group_group_id");

                    b.HasOne("LearningManagementSystem.ApiService.Features.Users.Data.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_group_user_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Activity", b =>
                {
                    b.Navigation("MilestoneRequirements");

                    b.Navigation("QuizOptions");

                    b.Navigation("VideoOptions");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Course", b =>
                {
                    b.Navigation("LearningPathCourses");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.LearningPath", b =>
                {
                    b.Navigation("LearningPathCourses");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.QuizQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Content.Data.Section", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.Group", b =>
                {
                    b.Navigation("GroupLearningPaths");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("LearningManagementSystem.ApiService.Features.Users.Data.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
